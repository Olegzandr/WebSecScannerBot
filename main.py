import asyncio
import requests
import random
import validators
import re
import aiohttp
import os
import socket
import logging
from ipaddress import ip_address, ip_network
from urllib.parse import urlparse, parse_qs, urlencode
from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_BOT_TOKEN")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
SEM = asyncio.Semaphore(3)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ SSRF
PRIVATE_IP_RANGES = [
    ip_network("127.0.0.0/8"),
    ip_network("10.0.0.0/8"),
    ip_network("172.16.0.0/12"),
    ip_network("192.168.0.0/16"),
    ip_network("::1/128"),
    ip_network("fc00::/7"),
]

def is_internal(url):
    try:
        hostname = urlparse(url).hostname
        ip = socket.gethostbyname(hostname)
        return any(ip_address(ip) in net for net in PRIVATE_IP_RANGES)
    except Exception:
        return True  # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
def create_keyboard():
    button_new_check = KeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É")
    button_help = KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")
    keyboard = ReplyKeyboardMarkup(keyboard=[[button_new_check, button_help]], \
                                   resize_keyboard=True, one_time_keyboard=False)
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ URL —Å–∞–π—Ç–∞, –∏ —è –ø—Ä–æ–≤–µ—Ä—é –µ–≥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.", \
                         reply_markup=create_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É"
@dp.message(lambda message: message.text == "üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É")
async def new_check(message: Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤—ã–π URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.", reply_markup=create_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
@dp.message(lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
async def help(message: Message):
    help_text = (
        "‚ö†Ô∏è –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞?\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ URL —Å–∞–π—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.\n"
        "2. –Ø –≤—ã–ø–æ–ª–Ω—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞, –≤–∫–ª—é—á–∞—è SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏ –∏ XSS.\n"
        "3. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞.\n\n"
        "üîÑ –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É'"
    )
    await message.answer(help_text, reply_markup=create_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è URL
@dp.message()
async def analyze_site(message: Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    await message.answer(f"–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª: {message.text}") 

    url = message.text.strip()
    if not url.startswith("https"):
        url = "https://" + url 

    if not validators.url(url) or is_internal(url):
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π URL.")
        return
    
    await message.answer("üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç —Å–∞–π—Ç–∞. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    headers_result = check_security_headers(url)
    await message.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –í—ã–ø–æ–ª—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ sql-–∏–Ω—ä–µ–∫—Ü–∏–π")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ SQL-–∏–Ω—ä–µ–∫—Ü–∏–π
    sqli_results = await check_sqli(url)
    await message.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ sql-–∏–Ω—ä–µ–∫—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ XSS")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ XSS
    xss_results = await check_xss(url)
    await message.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ XSS –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    report = "üìå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n"
    report += "üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n" + headers_result + "\n\n"
    report += "üîπ SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏:\n" + "\n".join(sqli_results) + "\n\n"
    report += "üîπ XSS:\n" + "\n".join(xss_results) + "\n\n"
    
    await message.answer(report, reply_markup=create_keyboard())

def get_random_user_agent():
    user_agents = [
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) \
            Chrome/120.0.0.0 Safari/537.36",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) \
            Version/16.1 Safari/605.1.15",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/119.0",
        "Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15 \
            (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1",
        "Mozilla/5.0 (Linux; Android 10; SM-A505FN) AppleWebKit/537.36 (KHTML, like Gecko) \
            Chrome/120.0.0.0 Mobile Safari/537.36"
    ]
    return random.choice(user_agents)

def check_security_headers(url):
    try:
        random_headers = {
            "User-Agent": get_random_user_agent(),
            "Accept-Language": "en-US,en;q=0.9",
        }
        result_issues = []

        response = requests.get(url, headers=random_headers, timeout=10)
        if response.status_code != 200:
            result_issues.append([f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}. \
                                  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞."])
        
        headers = response.headers

        check_funcs = (check_hsts, check_csp, check_clickjacking_security, check_referrer_policy,\
                       check_permissions_security, check_cors_security, check_cross_origin_policies,\
                        check_cache_control)
        for check_func in check_funcs:
            result_issues.append(check_func(headers))

        # –í—ã–≤–æ–¥ –æ—Ç—á—ë—Ç–∞
        return '\n'.join([issue for sublist in result_issues for issue in sublist]) \
            if result_issues else ["‚úÖ –í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"]
    
    except requests.exceptions.RequestException as e:
        return [[f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"]]

# HTTP Strict Transport Security (HSTS) ‚Äî –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç Downgrade-–∞—Ç–∞–∫–∏ (SSL Stripping)
def check_hsts(headers):
    issues = []
    if "Strict-Transport-Security" not in headers:
        issues.append(f"‚ö†Ô∏è HSTS –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Üí –≤–æ–∑–º–æ–∂–Ω–æ, —Å–∞–π—Ç —É—è–∑–≤–∏–º –∫ SSL Stripping.")
    else:
        hsts = headers["Strict-Transport-Security"]
        if "max-age" not in hsts:
            issues.append("‚ö†Ô∏è HSTS –µ—Å—Ç—å, –Ω–æ max-age –Ω–µ —É–∫–∞–∑–∞–Ω.")
        if "includeSubDomains" not in hsts:
            issues.append("‚ö†Ô∏è HSTS –Ω–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ –ø–æ–¥–¥–æ–º–µ–Ω—ã.")
        if "preload" not in hsts:
            issues.append("‚ö†Ô∏è HSTS –±–µ–∑ preload ‚Üí –±—Ä–∞—É–∑–µ—Ä—ã –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç HTTPS.")

    return issues

# Content Security Policy (CSP) ‚Äî –∑–∞—â–∏—Ç–∞ –æ—Ç XSS
def check_csp(headers):
    issues = []
    if "Content-Security-Policy" not in headers:
        issues.append("‚ö†Ô∏è CSP –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Üí –≤–æ–∑–º–æ–∂–Ω—ã XSS-–∞—Ç–∞–∫–∏ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")
    else:
        csp = headers["Content-Security-Policy"]
        if "'unsafe-inline'" in csp:
            issues.append("‚ö†Ô∏è CSP –ø–æ–∑–≤–æ–ª—è–µ—Ç inline-—Å–∫—Ä–∏–ø—Ç—ã ‚Üí XSS –≤–æ–∑–º–æ–∂–µ–Ω.")
        if "'unsafe-eval'" in csp:
            issues.append("‚ö†Ô∏è CSP –ø–æ–∑–≤–æ–ª—è–µ—Ç eval() ‚Üí XSS –≤–æ–∑–º–æ–∂–µ–Ω.")

    # Report-To (CSP violation reporting) ‚Äî –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π CSP
    if "Report-To" not in headers:
        issues.append("‚ö†Ô∏è Report-To –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Üí –Ω–∞—Ä—É—à–µ–Ω–∏—è CSP –Ω–µ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è.")

    return issues

def check_clickjacking_security(headers):
    issues = []
    
    # X-Frame-Options ‚Äî –∑–∞—â–∏—Ç–∞ –æ—Ç Clickjacking
    if "X-Frame-Options" not in headers:
        issues.append("‚ö†Ô∏è X-Frame-Options –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Üí –≤–æ–∑–º–æ–∂–Ω—ã Clickjacking-–∞—Ç–∞–∫–∏.")
    elif headers["X-Frame-Options"].lower() not in ["deny", "sameorigin"]:
        issues.append("‚ö†Ô∏è X-Frame-Options –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ‚Üí –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DENY –∏–ª–∏ SAMEORIGIN.")

    # X-Content-Type-Options ‚Äî –∑–∞—â–∏—Ç–∞ –æ—Ç MIME Sniffing
    if headers.get("X-Content-Type-Options", "").lower() != "nosniff":
        issues.append("‚ö†Ô∏è X-Content-Type-Options –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Üí \
                      –≤–æ–∑–º–æ–∂–Ω—ã MIME-–∞—Ç–∞–∫–∏.")

    return issues

def check_referrer_policy(headers):
    issues = []
    
    # Referrer-Policy ‚Äî –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —É—Ç–µ—á–∫–∏ URL-–¥–∞–Ω–Ω—ã—Ö
    allowed_referrer_policies = ("no-referrer", "strict-origin", "strict-origin-when-cross-origin", \
                                 "same-origin", "no-referrer-when-downgrade")
    if "Referrer-Policy" not in headers:
        issues.append("‚ö†Ô∏è Referrer-Policy –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Üí –≤–æ–∑–º–æ–∂–Ω—ã —É—Ç–µ—á–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö URL.")
    elif headers["Referrer-Policy"].lower() not in allowed_referrer_policies:
        issues.append(f"‚ö†Ô∏è Referrer-Policy –∑–∞–¥–∞–Ω –∫–∞–∫ {headers['Referrer-Policy']} ‚Üí –≤–æ–∑–º–æ–∂–Ω–æ, \
                      —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {', '.join(allowed_referrer_policies)}.")

    return issues

def check_permissions_security(headers):
    issues = []
    
    # Permissions-Policy ‚Äî –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ–Ω—Å–æ—Ä–∞–º, –∫–∞–º–µ—Ä–µ, –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
    if "Permissions-Policy" not in headers:
        issues.append("‚ö†Ô∏è Permissions-Policy –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Üí —Å–∞–π—Ç –º–æ–∂–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –∫–∞–º–µ—Ä—É, –º–∏–∫—Ä–æ—Ñ–æ–Ω")

    # Expect-CT ‚Äî –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–¥–¥–µ–ª—å–Ω—ã—Ö SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    if "Expect-CT" not in headers:
        issues.append("‚ö†Ô∏è Expect-CT –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Üí –≤–æ–∑–º–æ–∂–Ω—ã –∞—Ç–∞–∫–∏ —Å –ø–æ–¥–¥–µ–ª—å–Ω—ã–º–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏.")

    return issues

def check_cors_security(headers):
    issues = []
    
    # Cross-Origin Resource Sharing (CORS) ‚Äî –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ—Å—É—Ä—Å–∞–º —Å –¥—Ä—É–≥–∏—Ö –¥–æ–º–µ–Ω–æ–≤
    if "Access-Control-Allow-Origin" in headers and headers["Access-Control-Allow-Origin"] == "*":
        issues.append("‚ö†Ô∏è CORS –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø —Å –ª—é–±—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (Access-Control-Allow-Origin: *).")

    return issues    

def check_cross_origin_policies(headers):
    issues = []
    
    # Cross-Origin-Embedder-Policy (COEP)
    if headers.get("Cross-Origin-Embedder-Policy", "").lower() != "require-corp":
        issues.append("‚ö†Ô∏è COEP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ require-corp ‚Üí –≤–æ–∑–º–æ–∂–Ω—ã –∞—Ç–∞–∫–∏ —Ç–∏–ø–∞ Spectre.")

    # Cross-Origin-Opener-Policy (COOP)
    if headers.get("Cross-Origin-Opener-Policy", "").lower() not in ["same-origin", \
                                                                     "same-origin-allow-popups"]:
        issues.append("‚ö†Ô∏è COOP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ same-origin ‚Üí –≤–æ–∑–º–æ–∂–Ω–∞ —É—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –æ–∫–Ω–∞–º–∏.")

    return issues 

def check_cache_control(headers):
    issues = []
    
    # Cache-Control
    cache_control = headers.get("Cache-Control", "").lower()
    if not any(x in cache_control for x in ["no-store", "no-cache", "private"]):
        issues.append("‚ö†Ô∏è Cache-Control –Ω–µ –∑–∞–ø—Ä–µ—â–∞–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Üí –≤–æ–∑–º–æ–∂–Ω–∞ —É—Ç–µ—á–∫–∞ \
                      —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")

    return issues 

async def check_sqli(url):
    SQLI_PAYLOADS = [
    # –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω—ä–µ–∫—Ü–∏–∏
    "' OR 1=1 --",
    "' OR 'a'='a",
    '" OR "a"="a',
    "' OR '1'='1' --",
    "' OR 'x'='x' --",
    "' OR 'admin'='admin' --",

    # UNION-–∏–Ω—ä–µ–∫—Ü–∏–∏
    "' UNION SELECT null, null, null --",
    "' UNION SELECT 1, 'admin', 'password' --",
    "' UNION SELECT table_name, column_name, null FROM information_schema.columns --",

    # –û—à–∏–±–∫–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—ä–µ–∫—Ü–∏–∏
    "' AND 1=CONVERT(int, (SELECT @@version)) --",
    "' AND (SELECT COUNT(*) FROM users) > 0 --",
    "' AND ASCII(SUBSTRING((SELECT TOP 1 username FROM users), 1, 1)) > 64 --",

    # –ò–Ω—ä–µ–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –°–£–ë–î
    "' AND SLEEP(5) --",  # MySQL
    "' AND pg_sleep(5) --",  # PostgreSQL
    "' AND WAITFOR DELAY '0:0:5' --",  # MSSQL

    # –ò–Ω—ä–µ–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    "'/**/OR/**/1=1 --",
    "'%20OR%201=1 --",
    "'%0AOR%0A1=1 --"]

    SQLI_ERROR_PATTERNS = [
        # MySQL
        r"SQL syntax.*MySQL",
        r"error in your SQL syntax",
        r"You have an error in your SQL syntax",
        r"MySQL server version for the right syntax",

        # MSSQL
        r"Warning.*mssql",
        r"Microsoft OLE DB Provider for ODBC Drivers",
        r"Incorrect syntax near",
        r"Unclosed quotation mark before the character string",

        # PostgreSQL
        r"PostgreSQL.*ERROR",
        r"syntax error at or near",

        # Oracle
        r"ORA-00933: SQL command not properly ended",
        r"ORA-01756: quoted string not properly terminated",

        # SQLite
        r"SQLite error: near",
        r"SQLite error: syntax error",

        # –û–±—â–∏–µ –æ—à–∏–±–∫–∏
        r"Unclosed quotation mark after the character string",
        r"quoted string not properly terminated",
        r"syntax error at or near"]
    issues = []
    headers = {"User-Agent": get_random_user_agent()}

    parsed_url = urlparse(url)
    params = parse_qs(parsed_url.query)

    if not params:
        return ["‚úÖ SQL-–∏–Ω—ä–µ–∫—Ü–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ (–Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)."]

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, headers=headers) as normal_response:
                normal_text = await normal_response.text()

            tasks = []
            for param in params:
                for payload in SQLI_PAYLOADS:
                    test_params = params.copy()
                    test_params[param] = payload
                    test_url = f"{parsed_url.scheme}://{parsed_url.netloc}{parsed_url.path}?\
                        {urlencode(test_params, doseq=True)}"
                    tasks.append(test_sqli(session, test_url, param, payload, normal_text, \
                                           headers, SQLI_ERROR_PATTERNS))

            results = await asyncio.gather(*tasks)

            for result in results:
                if result:
                    issues.append(result)

        except aiohttp.ClientError:
            return ["‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ SQL-–∏–Ω—ä–µ–∫—Ü–∏–π."]

    return issues if issues else ["‚úÖ SQL-–∏–Ω—ä–µ–∫—Ü–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."]

async def test_sqli(session, test_url, param, payload, normal_text, headers, error_patterns):
    async with SEM:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        try:
            async with session.get(test_url, headers=headers, timeout=5) as response:
                response_text = await response.text()

                for pattern in error_patterns:
                    if re.search(pattern, response_text, re.IGNORECASE):
                        return f"‚ö†Ô∏è SQL-–∏–Ω—ä–µ–∫—Ü–∏—è –≤ '{param}'! –ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞: {pattern}"

                if response.status == 500:
                    return f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞—è SQL-–∏–Ω—ä–µ–∫—Ü–∏—è –≤ '{param}' —Å payload {payload} \
                        ‚Äî —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª 500!"

                if normal_text != response_text:
                    return f"‚ö†Ô∏è SQL-–∏–Ω—ä–µ–∫—Ü–∏—è –≤ '{param}' —Å payload {payload}! –û—Ç–≤–µ—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è."

            await asyncio.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (500 –º—Å)

        except (aiohttp.ClientError, asyncio.TimeoutError) as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)} –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ '{param}'."

    return None

async def check_xss(url):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ XSS-—É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –ø—É—Ç–µ–º –≤—Å—Ç–∞–≤–∫–∏ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤"""
    XSS_PAYLOADS = [
    # –ë–∞–∑–æ–≤—ã–µ –ø–µ–π–ª–æ–∞–¥—ã
    "<script>alert(1)</script>",
    "<img src=x onerror=alert(1)>",
    "'><svg onload=alert(1)>",
    "javascript:alert(1)",
    "<iframe src=javascript:alert(1)>",

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –∏ –∞—Ç—Ä–∏–±—É—Ç—ã
    "<a href='javascript:alert(1)'>Click me</a>",
    "<body onload=alert(1)>",
    "<input onfocus=alert(1) autofocus>",
    "<details open ontoggle=alert(1)>",

    # –ü–µ–π–ª–æ–∞–¥—ã –¥–ª—è DOM-based XSS
    "#<img src=x onerror=alert(1)>",
    "';alert(1);//",

    # –ü–µ–π–ª–æ–∞–¥—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    "%3Cscript%3Ealert(1)%3C/script%3E",
    '" onmouseover=alert(1) x="',
    "&lt;script&gt;alert(1)&lt;/script&gt;",

    # –ü–µ–π–ª–æ–∞–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
    "javascript:alert(1)",
    'x" onerror="alert(1)',
    "';alert(1);//"]
    
    issues = []
    headers = {"User-Agent": get_random_user_agent()}

    parsed_url = urlparse(url)
    params = parse_qs(parsed_url.query)

    if not params:
        return ["‚úÖ XSS-—É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ (–Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)."]

    async with aiohttp.ClientSession() as session:
        tasks = []
        for param in params:
            for payload in XSS_PAYLOADS:
                test_params = params.copy()
                test_params[param] = payload
                test_url = f"{parsed_url.scheme}://{parsed_url.netloc}{parsed_url.path}?\
                    {urlencode(test_params, doseq=True)}"
                tasks.append(test_xss(session, test_url, param, payload, headers))

        results = await asyncio.gather(*tasks)

        for result in results:
            if result:
                issues.append(result)

    return issues if issues else ["‚úÖ XSS-—É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."]


async def test_xss(session, test_url, param, payload, headers):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç XSS-–ø—ç–π–ª–æ–∞–¥ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—Å—Ç–∞–≤–∏–ª—Å—è –ª–∏ –æ–Ω –≤ HTML"""
    async with SEM:
        try:
            async with session.get(test_url, headers=headers, timeout=5) as response:
                response_text = await response.text()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ—Ä–Ω—É–ª—Å—è –ª–∏ payload –≤ HTML-–æ—Ç–≤–µ—Ç–µ –±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                if payload in response_text:
                    return f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–∞ XSS –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ '{param}' —Å payload `{payload}`!"

            await asyncio.sleep(0.5)

        except asyncio.TimeoutError:
            return f"‚è≥ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ XSS –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ '{param}'."  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞

        except aiohttp.ClientError:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ XSS –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ '{param}'."  # –û–±—â–∏–µ –æ—à–∏–±–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞

        except aiohttp.ServerTimeoutError:
            return f"‚è≥ –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ XSS –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ '{param}'."  # –¢–∞–π–º–∞—É—Ç —Å–µ—Ä–≤–µ—Ä–∞

        except aiohttp.HttpProcessingError as e:
            return f"‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ XSS –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ '{param}': {e}"  # –û—à–∏–±–∫–∞ HTTP (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4xx –∏–ª–∏ 5xx)

        except asyncio.CancelledError:
            return f"‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ '{param}'."  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏

        except Exception as e:
            return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ XSS –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ '{param}': {str(e)}"  # –û–±—â–∞—è –æ—à–∏–±–∫–∞

    return None


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())